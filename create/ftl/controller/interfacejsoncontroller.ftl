<#include "../function.ftl"><#assign tablePrimaryKeyColumnType><@getTableKeyType cols /></#assign><#assign colInteger>${checkColTypeIsToJavaNotString(tablePrimaryKeyColumnType)?string}</#assign>package ${packname}.controller.interfacewithjson;import ${packname}.controller.InterfaceJsonController;import ${packname}.entity.runtime.InterfaceJsonResponseJson;<@getImportInterface cols packname refCols /><@genJoinAndRefImport joinTables refCols  />@Controller	/** ${name} */@RequestMapping("/apijson/${tab?lower_case}")public class ${tab}InterfaceJsonController extends InterfaceJsonController {	Logger logger = LogManager.getLogger(${tab}InterfaceJsonController.class.getName());		InterfaceJsonResponseJson ijrj = new InterfaceJsonResponseJson(){		private static final long serialVersionUID = 1L;		{			put("error", ResponseErrorMsg.SUCCESS.getError_code());			put("msg", ResponseErrorMsg.SUCCESS.getError_msg());		}	};			@Resource	private ${tab}Service ${tab?uncap_first}Svc;		<@genJoinAndRefService joinTables refCols  /><#if (!code?starts_with("SQLVW_") && !code?starts_with("SQLVVW_"))>			@Login(value=LoginResultReturnType.page,reqFromType=LoginRequestFromType.jsonInterface)	@RequestMapping(value="/save")	public void save(HttpServletRequest request, HttpServletResponse response			,@RequestBody ${tab}Request requestBody){		ijrj.clear();		session = request.getSession();		try{			${tab}Vojo ${tab?uncap_first}VojoUpd = requestBody.getData();			Map<String,Object> checkResultMap = ${tab?uncap_first}VojoUpd.checkLength(${tab?uncap_first}VojoUpd);			if(!(Boolean) checkResultMap.get("result")){				ijrj.put("error", ResponseErrorMsg.PARAMER_EMPTY.getError_code());				ijrj.put("msg", ResponseErrorMsg.PARAMER_EMPTY.getError_msg() + "：" + checkResultMap.get("msg"));				writeToJson(response, ijrj);			}else{				<#assign colInteger>${checkColTypeIsToJavaNotString(tablePrimaryKeyColumnType)?string}</#assign>				<#if colInteger=='true'>				if(<#list cols as col><#if col.primaryKey>null==${tab?uncap_first}Upd.get<@getTableKeyForSetGet cols/>()<#break></#if></#list>){					<#-- ${tab?uncap_first}VojoUpd.setCreateTime(new Date());有创建时间、更新时间项目使用，其他项目可删除 -->					<#-- ${tab?uncap_first}VojoUpd.setUpdateTime(new Date());有创建时间、更新时间项目使用，其他项目可删除 -->					${tab?uncap_first}Svc.add${tab}(${tab?uncap_first}VojoUpd);				}else{					if(null!=${tab?uncap_first}VojoUpd.get<@getTableKeyForSetGet cols/>Mults()){						for(int i<@getTableKeyForSetGet cols/>=0;i<@getTableKeyForSetGet cols/><${tab?uncap_first}VojoUpd.get<@getTableKeyForSetGet cols/>Mults().length;i<@getTableKeyForSetGet cols/>++){							${tab?uncap_first}VojoUpd.set<@getTableKeyForSetGet cols/>((Integer) ${tab?uncap_first}VojoUpd.get<@getTableKeyForSetGet cols/>Mults()[i<@getTableKeyForSetGet cols/>]);							<#-- ${tab?uncap_first}VojoUpd.setUpdateTime(new Date());有创建时间、更新时间项目使用，其他项目可删除 -->							${tab?uncap_first}Svc.upd${tab}ByPrimaryKey(${tab?uncap_first}VojoUpd);						}					}else{						<#-- ${tab?uncap_first}VojoUpd.setUpdateTime(new Date());有创建时间、更新时间项目使用，其他项目可删除 -->						${tab?uncap_first}Svc.upd${tab}ByPrimaryKey(${tab?uncap_first}VojoUpd);		//				${tab}Vojo  ${tab?uncap_first}Vojo = new ${tab}Vojo();		//更新数据过滤条件		//				${tab?uncap_first}Svc.upd${tab}ByFilter(${tab?uncap_first}VojoUpd,${tab?uncap_first}Vojo);					}				}				<#else>				if(StringUtils.isBlank(${tab?uncap_first}VojoUpd.get<@getTableKeyForSetGet cols/>())){				 <#list cols as col><#if col.primaryKey >${tab?uncap_first}VojoUpd.set<@getTableKeyForSetGet cols/>(Utils.shortUUIDRandom());</#if></#list>				 <#-- ${tab?uncap_first}VojoUpd.setCreateTime(new Date());有创建时间、更新时间项目使用，其他项目可删除 -->				 <#-- ${tab?uncap_first}VojoUpd.setUpdateTime(new Date());有创建时间、更新时间项目使用，其他项目可删除 -->				 ${tab?uncap_first}Svc.add${tab}(${tab?uncap_first}VojoUpd);				}else{					if(null!=${tab?uncap_first}VojoUpd.get<#list cols as col><#if col.primaryKey><@getTableKeyForSetGet cols/></#if></#list>()){						for(String t<#list cols as col><#if col.primaryKey><@getTableKeyForSetGet cols/></#if></#list> : ${tab?uncap_first}VojoUpd.get<#list cols as col><#if col.primaryKey><@getTableKeyForSetGet cols/></#if></#list>().split(",")){							<#list cols as col><#if col.primaryKey >${tab?uncap_first}VojoUpd.set<@getTableKeyForSetGet cols/>(t<#list cols as col><#if col.primaryKey><@getTableKeyForSetGet cols/></#if></#list>);</#if></#list>								<#-- ${tab?uncap_first}.setUpdateTime(new Date());有创建时间、更新时间项目使用，其他项目可删除 -->							${tab?uncap_first}Svc.upd${tab}ByPrimaryKey(${tab?uncap_first}VojoUpd);							<#-- ${tab?uncap_first}VojoUpd.setUpdateTime(new Date());有创建时间、更新时间项目使用，其他项目可删除 -->			//				${tab}Vojo  ${tab?uncap_first}Vojo = new ${tab}Vojo();		//更新数据过滤条件			//				${tab?uncap_first}Svc.upd${tab}ByFilter(${tab?uncap_first}VojoUpd,${tab?uncap_first}Vojo);							}						}					}				</#if>			}		}catch(Exception e){			ijrj.put("error", ResponseErrorMsg.REQUEST_URL_ERROR_412.getError_code());			ijrj.put("msg", ResponseErrorMsg.REQUEST_URL_ERROR_412.getError_msg() + "：" + e.getLocalizedMessage());		}		writeToJson(response, ijrj);	}		@Login(value=LoginResultReturnType.page,reqFromType=LoginRequestFromType.jsonInterface)	@RequestMapping(value="/del")	public void del(HttpServletRequest request, HttpServletResponse response			,@RequestBody ${tab}Request requestBody){		ijrj.clear();		session = request.getSession();		${tab} ${tab?uncap_first} = null == requestBody.getData() ? new ${tab}() : requestBody.getData();		${tab?uncap_first}Svc.del${tab}ByPrimaryKey(<#list cols as col><#if col.primaryKey>${tab?uncap_first}.get<@getTableKeyForSetGet cols/>()<#break></#if></#list>);		writeToJson(response, ijrj);	}</#if>		@Login(value=LoginResultReturnType.page,reqFromType=LoginRequestFromType.jsonInterface)	@RequestMapping(value="/list")	public void list(HttpServletRequest request, HttpServletResponse response			,@RequestBody ${tab}Request requestBody){		ijrj.clear();		session = request.getSession();		Pagination page = null == requestBody.getPage() ? new Pagination() : requestBody.getPage();		${tab} ${tab?uncap_first} = null == requestBody.getData() ? new ${tab}() : requestBody.getData();				<#if (joinTables?size>0)>//		page =  ${tab?uncap_first}Svc.getAll${tab}ByPage(page,  ${tab?uncap_first});		page =  ${tab?uncap_first}Svc.getAll${tab}ByPageWithJoin(page, ${tab?uncap_first});//		List<${tab}> resultSk = ${tab?uncap_first}Svc.getAll${tab}BySearchKey(${tab?uncap_first}, searchCol);//		List<${tab}> resultSkJ = ${tab?uncap_first}Svc.getAll${tab}BySearchKeyWithJoin(${tab?uncap_first}, searchCol);		<#else>		page =  ${tab?uncap_first}Svc.getAll${tab}ByPage(page,  ${tab?uncap_first});//		List<${tab}> resultSk = ${tab?uncap_first}Svc.getAll${tab}BySearchKey(${tab?uncap_first}, searchCol);		</#if>		ijrj.put("data", page.getData());		ijrj.put("filter", ${tab?uncap_first});		page.setData(null);		ijrj.put("page", page);		writeToJson(response, ijrj);	}	<#if (refCols?size>0)>	@Login(value=LoginResultReturnType.page,reqFromType=LoginRequestFromType.jsonInterface)	@RequestMapping(value="/listext")	public void listFull(HttpServletRequest request, HttpServletResponse response			,@RequestBody ${tab}Request requestBody){		ijrj.clear();		session = request.getSession();		Pagination page = null == requestBody.getPage() ? new Pagination() : requestBody.getPage();		${tab} ${tab?uncap_first} = null == requestBody.getData() ? new ${tab}() : requestBody.getData();				<#if (joinTables?size>0)>//		page =  ${tab?uncap_first}Svc.getAll${tab}ByPage(page,  ${tab?uncap_first});		page =  ${tab?uncap_first}Svc.getAll${tab}ByPageWithJoin(page, ${tab?uncap_first});//		List<${tab}> resultSk = ${tab?uncap_first}Svc.getAll${tab}BySearchKey(${tab?uncap_first}, searchCol);//		List<${tab}> resultSkJ = ${tab?uncap_first}Svc.getAll${tab}BySearchKeyWithJoin(${tab?uncap_first}, searchCol);		<#else>		page =  ${tab?uncap_first}Svc.getAll${tab}ByPage(page,  ${tab?uncap_first});//		List<${tab}> resultSk = ${tab?uncap_first}Svc.getAll${tab}BySearchKey(${tab?uncap_first}, searchCol);		</#if>				@SuppressWarnings("unchecked")		List<${tab}> list = (List<${tab}>) page.getData();		for(${tab} ${tab?uncap_first}Item:list){			<#if (refCols?size>0)><#list refCols as col>//			${tab?uncap_first} = ${tab?uncap_first}Svc.addRef${col.type}(${tab?uncap_first});			</#list></#if>		}		page.setData(list);			ijrj.put("data", page.getData());		ijrj.put("filter", ${tab?uncap_first});		page.setData(null);		ijrj.put("page", page);		writeToJson(response, ijrj);	}</#if>		@Login(value=LoginResultReturnType.page,reqFromType=LoginRequestFromType.jsonInterface)	@RequestMapping(value="/show")	public void show(HttpServletRequest request, HttpServletResponse response			,@RequestBody ${tab}Request requestBody){		ijrj.clear();		session = request.getSession();		${tab} ${tab?uncap_first} = null == requestBody.getData() ? new ${tab}() : requestBody.getData();		try{			<#if (joinTables?size>0)>			${tab?uncap_first} = ${tab?uncap_first}Svc.get${tab}ByPrimaryKeyWithJoin(new ${tab}(<#list cols as col><#if (col.primaryKey && col.inSelfTable)>${tab?uncap_first}.get<@getTableKeyForSetGet cols/>()</#if></#list>));			<#else>			${tab?uncap_first} = ${tab?uncap_first}Svc.get${tab}ByPrimaryKey(<#list cols as col><#if (col.primaryKey && col.inSelfTable)>${tab?uncap_first}.get<@getTableKeyForSetGet cols/>()</#if></#list>);			</#if>			<#if (refCols?size>0)><#list refCols as col>//			${tab?uncap_first} = ${tab?uncap_first}Svc.addRef${col.type}(${tab?uncap_first});			</#list></#if>			ijrj.put("data", ${tab?uncap_first});				}catch(Exception e){			ijrj.put("error", ResponseErrorMsg.REQUEST_URL_ERROR_412.getError_code());			ijrj.put("msg", ResponseErrorMsg.REQUEST_URL_ERROR_412.getError_msg() + "：" + e.getLocalizedMessage());		}		writeToJson(response, ijrj);	}		class ${tab}Request{		${tab} data;		Pagination page;		public ${tab} getData() {			return data;		}		public void setData(${tab} data) {			this.data = data;		}				public Pagination getPage() {			return page;		}		public void setPage(Pagination page) {			this.page = page;		}	}	}