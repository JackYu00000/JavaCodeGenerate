<#include "../function.ftl"><#assign tableKeyStr><@compress><@getTableKey cols/></@compress></#assign><#assign tableKeyParamStr><@compress><@getTableKeyParamFirst cols/></@compress></#assign><#assign tablePrimaryKeyColumnType><@getTableKeyType cols /></#assign><#assign colInteger>${checkColTypeIsToJavaNotString(tablePrimaryKeyColumnType)?string}</#assign>package ${packname}.controller.interfacewithmobi;import ${packname}.controller.InterfaceMobiKeys;import ${packname}.controller.InterfaceMobiController;import org.springframework.web.bind.annotation.RequestHeader;import ${packname}.entity.runtime.InterfaceMobiResponseJson;import ${packname}.entity.runtime.InterfaceMobiUserInfoRequest;<@getImportInterface cols packname refCols /><@genJoinAndRefImport joinTables refCols  />@Controller@RequestMapping("/apimobi/${tab?lower_case}")public class ${tab}InterfaceMobiController extends InterfaceMobiController {	Logger logger = LogManager.getLogger(${tab}InterfaceMobiController.class.getName());		@Resource	private ${tab}Service ${tab?uncap_first}Svc;		<@genJoinAndRefService joinTables refCols  />	<#if (!code?starts_with("SQLVW_") && !code?starts_with("SQLVVW_"))>	@Login(value=LoginResultReturnType.json,reqFromType=LoginRequestFromType.mobiInterface)	@RequestMapping(value="/save")	public void save(HttpServletRequest request, HttpServletResponse response		,@RequestHeader(value=InterfaceMobiKeys.INTERFACE_MOBILE_REQUEST_TYPE_KEY,required=InterfaceMobiKeys.INTERFACE_MOBILE_PARAMER_REQUIRED)String requestType		,@RequestHeader(value=InterfaceMobiKeys.INTERFACE_MOBILE_AUTHOR_KEY,required=InterfaceMobiKeys.INTERFACE_MOBILE_PARAMER_REQUIRED)String cAuthorKey		,@RequestBody ${tab}Request requestBody) throws ServletException, IOException{		InterfaceMobiResponseJson imrj = new InterfaceMobiResponseJson();		try{			imrj.put(InterfaceMobiKeys.INTERFACE_MOBILE_ERROR, ResponseErrorMsg.SUCCESS.error_code);			imrj.put(InterfaceMobiKeys.INTERFACE_MOBILE_MSG, ResponseErrorMsg.SUCCESS.error_msg);			${tab}Vojo ${tab?uncap_first}VojoUpd = new ${tab}Vojo();			${tab?uncap_first}VojoUpd = requestBody.getData();			Map<String,Object> checkResultMap = ${tab?uncap_first}VojoUpd.checkLength(${tab?uncap_first}VojoUpd);			if(!(Boolean) checkResultMap.get("result")){				imrj.put(InterfaceMobiKeys.INTERFACE_MOBILE_ERROR, ResponseErrorMsg.PARAMER_EMPTY.getError_code());				imrj.put(InterfaceMobiKeys.INTERFACE_MOBILE_MSG, ResponseErrorMsg.PARAMER_EMPTY.getError_msg() + "：" + checkResultMap.get(InterfaceMobiKeys.INTERFACE_MOBILE_MSG));				writeToJson(request, response, imrj);			}else{				<#if colInteger=='true'>				if(<#list cols as col><#if col.primaryKey>null==${tab?uncap_first}VojoUpd.get<@getTableKeyForSetGet cols/>()<#break></#if></#list>){					<#-- ${tab?uncap_first}VojoUpd.setCreateTime(new Date());有创建时间、更新时间项目使用，其他项目可删除 -->					<#-- ${tab?uncap_first}VojoUpd.setUpdateTime(new Date());有创建时间、更新时间项目使用，其他项目可删除 -->					${tab?uncap_first}Svc.add${tab}(${tab?uncap_first}VojoUpd);				}else{					if(null!=${tab?uncap_first}VojoUpd.get<@getTableKeyForSetGet cols/>Mults()){						for(int i<@getTableKeyForSetGet cols/>=0;i<@getTableKeyForSetGet cols/><${tab?uncap_first}VojoUpd.get<@getTableKeyForSetGet cols/>Mults().length;i<@getTableKeyForSetGet cols/>++){							${tab?uncap_first}VojoUpd.set<@getTableKeyForSetGet cols/>((Integer) ${tab?uncap_first}VojoUpd.get<@getTableKeyForSetGet cols/>Mults()[i<@getTableKeyForSetGet cols/>]);							<#-- ${tab?uncap_first}VojoUpd.setUpdateTime(new Date());有创建时间、更新时间项目使用，其他项目可删除 -->							${tab?uncap_first}Svc.upd${tab}ByPrimaryKey(${tab?uncap_first}VojoUpd);						}					}else{						<#-- ${tab?uncap_first}VojoUpd.setUpdateTime(new Date());有创建时间、更新时间项目使用，其他项目可删除 -->						${tab?uncap_first}Svc.upd${tab}ByPrimaryKey(${tab?uncap_first}VojoUpd);		//				${tab}Vojo  ${tab?uncap_first}Vojo = new ${tab}Vojo();		//更新数据过滤条件		//				${tab?uncap_first}Svc.upd${tab}ByFilter(${tab?uncap_first}VojoUpd,${tab?uncap_first}Vojo);					}				}				<#else>				if(StringUtils.isBlank(${tab?uncap_first}VojoUpd.get<@getTableKeyForSetGet cols/>())){				 <#list cols as col><#if col.primaryKey >${tab?uncap_first}VojoUpd.set<@getTableKeyForSetGet cols/>(Utils.shortUUIDRandom());</#if></#list>				 <#-- ${tab?uncap_first}VojoUpd.setCreateTime(new Date());有创建时间、更新时间项目使用，其他项目可删除 -->				 <#-- ${tab?uncap_first}VojoUpd.setUpdateTime(new Date());有创建时间、更新时间项目使用，其他项目可删除 -->				 ${tab?uncap_first}Svc.add${tab}(${tab?uncap_first}VojoUpd);				}else{					if(null!=${tab?uncap_first}VojoUpd.get<#list cols as col><#if col.primaryKey><@getTableKeyForSetGet cols/></#if></#list>()){						for(String t<#list cols as col><#if col.primaryKey><@getTableKeyForSetGet cols/></#if></#list> : ${tab?uncap_first}VojoUpd.get<#list cols as col><#if col.primaryKey><@getTableKeyForSetGet cols/></#if></#list>().split(",")){							<#list cols as col><#if col.primaryKey >${tab?uncap_first}VojoUpd.set<@getTableKeyForSetGet cols/>(t<#list cols as col><#if col.primaryKey><@getTableKeyForSetGet cols/></#if></#list>);</#if></#list>								<#-- ${tab?uncap_first}.setUpdateTime(new Date());有创建时间、更新时间项目使用，其他项目可删除 -->							${tab?uncap_first}Svc.upd${tab}ByPrimaryKey(${tab?uncap_first}VojoUpd);							<#-- ${tab?uncap_first}VojoUpd.setUpdateTime(new Date());有创建时间、更新时间项目使用，其他项目可删除 -->			//				${tab}Vojo  ${tab?uncap_first}Vojo = new ${tab}Vojo();		//更新数据过滤条件			//				${tab?uncap_first}Svc.upd${tab}ByFilter(${tab?uncap_first}VojoUpd,${tab?uncap_first}Vojo);							}						}					}				</#if>			}			writeToJson(request, response, imrj);		}catch(Exception e){			response.setStatus(412);			response.setHeader(InterfaceMobiKeys.INTERFACE_MOBILE_MSG, e.getLocalizedMessage());			request.getRequestDispatcher("/412").forward(request, response);		}	}		@Login(value=LoginResultReturnType.json,reqFromType=LoginRequestFromType.mobiInterface)	@RequestMapping(value="/del")	public void del(HttpServletRequest request, HttpServletResponse response		,@RequestHeader(value=InterfaceMobiKeys.INTERFACE_MOBILE_REQUEST_TYPE_KEY,required=InterfaceMobiKeys.INTERFACE_MOBILE_PARAMER_REQUIRED)String requestType		,@RequestHeader(value=InterfaceMobiKeys.INTERFACE_MOBILE_AUTHOR_KEY,required=InterfaceMobiKeys.INTERFACE_MOBILE_PARAMER_REQUIRED)String cAuthorKey		,@RequestBody ${tab}Request requestBody) throws ServletException, IOException{		InterfaceMobiResponseJson imrj = new InterfaceMobiResponseJson();		${tab}Vojo ${tab?uncap_first}Vojo = new ${tab}Vojo();		try{			imrj.put(InterfaceMobiKeys.INTERFACE_MOBILE_ERROR, ResponseErrorMsg.SUCCESS.error_code);			imrj.put(InterfaceMobiKeys.INTERFACE_MOBILE_MSG, ResponseErrorMsg.SUCCESS.error_msg);			${tab?uncap_first}Vojo = requestBody.getData();			${tab?uncap_first}Svc.del${tab}ByPrimaryKey(<#list cols as col><#if col.primaryKey>${tab?uncap_first}Vojo.get<@getTableKeyForSetGet cols/>()<#break></#if></#list>);			writeToJson(request, response, imrj);		}catch(Exception e){			response.setStatus(412);			response.setHeader(InterfaceMobiKeys.INTERFACE_MOBILE_MSG, e.getLocalizedMessage());			request.getRequestDispatcher("/412").forward(request, response);		}	}</#if>	@Login(value=LoginResultReturnType.json,reqFromType=LoginRequestFromType.mobiInterface)	@RequestMapping(value={"/",""})	public void list(HttpServletRequest request, HttpServletResponse response		,@RequestHeader(value=InterfaceMobiKeys.INTERFACE_MOBILE_REQUEST_TYPE_KEY,required=InterfaceMobiKeys.INTERFACE_MOBILE_PARAMER_REQUIRED)String requestType		,@RequestHeader(value=InterfaceMobiKeys.INTERFACE_MOBILE_AUTHOR_KEY,required=InterfaceMobiKeys.INTERFACE_MOBILE_PARAMER_REQUIRED)String cAuthorKey		,@RequestBody ${tab}Request requestBody) throws ServletException, IOException{		InterfaceMobiResponseJson imrj = new InterfaceMobiResponseJson();		${tab}Vojo ${tab?uncap_first}Vojo = new ${tab}Vojo();		Pagination page = new Pagination();		try{			imrj.put(InterfaceMobiKeys.INTERFACE_MOBILE_ERROR, ResponseErrorMsg.SUCCESS.error_code);			imrj.put(InterfaceMobiKeys.INTERFACE_MOBILE_MSG, ResponseErrorMsg.SUCCESS.error_msg);			if(null!=requestBody.getPage()){				page = requestBody.getPage();			}			if(null!=requestBody.getData()){				${tab?uncap_first}Vojo = requestBody.getData();				imrj.put("filter", ${tab?uncap_first}Vojo);			}						<#if (joinTables?size>0)>//			page =  ${tab?uncap_first}Svc.getAll${tab}ByPage(page, ${tab?uncap_first}Vojo);			page =  ${tab?uncap_first}Svc.getAll${tab}ByPageWithJoin(page, ${tab?uncap_first}Vojo);//			List<${tab}> resultSk = ${tab?uncap_first}Svc.getAll${tab}BySearchKey(${tab?uncap_first}Vojo, searchCol);//			List<${tab}> resultSkJ = ${tab?uncap_first}Svc.getAll${tab}BySearchKeyWithJoin(${tab?uncap_first}Vojo, searchCol);			<#else>			page =  ${tab?uncap_first}Svc.getAll${tab}ByPage(page, ${tab?uncap_first}Vojo);//			List<${tab}> resultSk = ${tab?uncap_first}Svc.getAll${tab}BySearchKey(${tab?uncap_first}Vojo, searchCol);			</#if>				imrj.put("data", page.getData());			page.setData(null);			imrj.put("page", page);			writeToJson(request, response, imrj);		}catch(Exception e){			response.setStatus(412);			response.setHeader(InterfaceMobiKeys.INTERFACE_MOBILE_MSG, e.getLocalizedMessage());			request.getRequestDispatcher("/412").forward(request, response);		}	}		@Login(value=LoginResultReturnType.json,reqFromType=LoginRequestFromType.mobiInterface)	@RequestMapping(value="/<@compress>{<@getTableKey cols/>}",method={RequestMethod.GET,RequestMethod.POST})</@compress>	public void show(HttpServletRequest request, HttpServletResponse response		,@RequestHeader(value=InterfaceMobiKeys.INTERFACE_MOBILE_REQUEST_TYPE_KEY,required=InterfaceMobiKeys.INTERFACE_MOBILE_PARAMER_REQUIRED)String requestType		,@RequestHeader(value=InterfaceMobiKeys.INTERFACE_MOBILE_AUTHOR_KEY,required=InterfaceMobiKeys.INTERFACE_MOBILE_PARAMER_REQUIRED)String cAuthorKey		,@PathVariable("${tableKeyStr}")${tableKeyParamStr}) throws ServletException, IOException{		InterfaceMobiResponseJson imrj = new InterfaceMobiResponseJson();		${tab}Vojo ${tab?uncap_first}Vojo = new ${tab}Vojo();		try{			imrj.put(InterfaceMobiKeys.INTERFACE_MOBILE_ERROR, ResponseErrorMsg.SUCCESS.error_code);			imrj.put(InterfaceMobiKeys.INTERFACE_MOBILE_MSG, ResponseErrorMsg.SUCCESS.error_msg);			<#if (joinTables?size>0)>			${tab?uncap_first}Vojo = new ${tab}Vojo(${tab?uncap_first}Svc.get${tab}ByPrimaryKeyWithJoin(new ${tab}(${tableKeyStr})));			<#else>			${tab?uncap_first}Vojo = new ${tab}Vojo(${tab?uncap_first}Svc.get${tab}ByPrimaryKey(${tableKeyStr}));			</#if>								<#list refCols as col>			${col.type} filter${col.type} = new ${col.type}();			filter${col.type}.set<@genAttributeByForSetAndGet colName_ABFSAG='${col.refChildColumn}'/>(${tab?uncap_first}Vojo.get<@genAttributeByForSetAndGet colName_ABFSAG='${col.refFatherColumn}'/>());			</#list>			<#if (refCols?size>0)><#list refCols as col>			<#if (col.typeExpend?upper_case=="LIST")>			${tab?uncap_first}Svc.add<@genAttributeByForSetAndGet colName_ABFSAG='${col.code}'/>(${tab?uncap_first}Vojo,filter${col.type},new Pagination());			<#else>			${tab?uncap_first}Svc.add<@genAttributeByForSetAndGet colName_ABFSAG='${col.code}'/>(${tab?uncap_first}Vojo);			</#if>			</#list></#if>			imrj.put("data", ${tab?uncap_first}Vojo);			writeToJson(request, response, imrj);		}catch(Exception e){			response.setStatus(412);			response.setHeader(InterfaceMobiKeys.INTERFACE_MOBILE_MSG, e.getLocalizedMessage());			request.getRequestDispatcher("/412").forward(request, response);		}	}		class ${tab}Request extends InterfaceMobiUserInfoRequest{		${tab}Vojo data;		Pagination page;				public ${tab}Vojo getData() {			return data;		}		public void setData(${tab}Vojo data) {			this.data = data;		}				public Pagination getPage() {			return page;		}		public void setPage(Pagination page) {			this.page = page;		}	}	}