<#include "function.ftl">package ${packname}.service.impl;import java.util.ArrayList;import java.util.List;import org.apache.commons.lang3.StringUtils;import java.lang.reflect.InvocationTargetException;import org.apache.commons.beanutils.BeanUtils;import javax.annotation.Resource;import org.springframework.stereotype.Service;import ${packname}.web.Pagination;import ${packname}.mapper.${tab}Mapper;<#if (joinTables?size>0)>import ${packname}.mapper.${tab}ExtendViewMapper;</#if>import ${packname}.entity.${tab};<#if (refCols?size>0)><#list refCols as col><#if (col.typeExpend?upper_case=="LIST")>import ${packname}.entity.${col.type};<#if (col.fatherTableHasJoin)>import ${packname}.entity.extend.${col.type}Extend;</#if></#if></#list></#if><#if (joinTables?size>0)>import ${packname}.entity.extend.${tab}Extend;</#if>import ${packname}.service.${tab}Service;<#assign serviceList>${genJoinAndRefImportBaseDataList(joinTables,refCols)}</#assign><#if serviceList?contains("ref")>import ${packname}.entity.refenum.${tab}Ref;</#if><#if (serviceList!="")><#list serviceList?split(",") as service><#if (service?split(':')[1]=="ref")>import ${packname}.entity.${service?split(":")[0]};import ${packname}.mapper.${service?split(":")[0]}Mapper;</#if></#list></#if><#if (refCols?size>0)><#list refCols as col>	<#if (col.fatherTableHasJoin)>import ${packname}.entity.extend.${col.type}Extend;import ${packname}.mapper.${col.type}ExtendViewMapper;	</#if></#list></#if>@Service("${tab?lower_case}serviceimpl")public class ${tab}ServiceImpl implements ${tab}Service {	@Resource	private ${tab}Mapper ${tab?uncap_first}Mapper;	<#if (joinTables?size>0)>	@Resource	private ${tab}ExtendViewMapper ${tab?uncap_first}ExtendViewMapper;</#if>	<#if (refCols?size>0)><#list refCols as col>	<#if (col.fatherTableHasJoin)>	@Resource	private ${col.type}ExtendViewMapper ${col.type?uncap_first}ExtendViewMapper;		</#if></#list></#if><#if (!code?starts_with("SQLVW_") && !code?starts_with("SQLVVW_"))>		<#if (serviceList!="")>	<#list serviceList?split(",") as service>	<#if (service?split(':')[1]=="ref")>	@Resource	private ${service?split(":")[0]}Mapper ${service?split(":")[0]?uncap_first}Mapper;		</#if>	</#list>	</#if>	@Override	public int add${tab}(${tab} ${tab?uncap_first}) {	<#assign needWriteDefalue = false>	<#list cols as col><#if (!col.primaryKey && col.mandatory=='1' && col.inSelfTable && col.defaultValue?exists)>		<#assign needWriteDefalue = true><#break> 	</#if></#list>	<#if needWriteDefalue> 		${tab?uncap_first}.writeDefaultForNotNull(${tab?uncap_first});	</#if> 		<#list cols as col><#if (col.primaryKey && col.inSelfTable)>		<#assign colInteger>${checkColTypeIsToJavaNotString(col.type)?string}</#assign>		<#if colInteger=='true'>		${tab?uncap_first}Mapper.add${tab}(${tab?uncap_first});		return ${tab?uncap_first}.get<@getTableKeyForSetGet cols/>();		<#else>		${tab?uncap_first}Mapper.add${tab}(${tab?uncap_first});		return 0;		</#if><#break></#if></#list>	}//	@Override//	public int del${tab}ByPrimaryKey(<@compress><@getTableKeyParamFirst cols/></@compress>){//		${tab?uncap_first}Mapper.del${tab}ByPrimaryKey(<@compress><@getTableKey cols/></@compress>);//		return 0;//	}//	@Override//	public void del${tab}ByFilter(${tab} ${tab?uncap_first}){//		List<${tab}> resultList = ${tab?uncap_first}Mapper.getAll${tab}BySearch(${tab?uncap_first});//		for(${tab} t${tab} : resultList){//			${tab?uncap_first}Mapper.del${tab}ByPrimaryKey(t${tab}.get<#list cols as col><#if col.primaryKey ><@getTableKeyForSetGet cols/><#break></#if></#list>());//		}//	}		@Override	public int upd${tab}ByPrimaryKey(${tab} ${tab?uncap_first}){		${tab?uncap_first}Mapper.upd${tab}ByPrimaryKey(${tab?uncap_first});		return 0;	}	@Override	public int upd${tab}ByFilter(${tab} ${tab?uncap_first},${tab} ${tab?uncap_first}Upd){		List<${tab}> resultList = ${tab?uncap_first}Mapper.getAll${tab}BySearch(${tab?uncap_first});		for(${tab} t${tab} : resultList){			${tab?uncap_first}Upd.set<#list cols as col><#if col.primaryKey ><@getTableKeyForSetGet cols/><#break></#if></#list>(t${tab}.get<#list cols as col><#if col.primaryKey ><@getTableKeyForSetGet cols/><#break></#if></#list>());			${tab?uncap_first}Mapper.upd${tab}ByPrimaryKey(${tab?uncap_first}Upd);		}		return 0;	}</#if>	@Override	public ${tab} get${tab}ByPrimaryKey(<@compress><@getTableKeyParamFirst cols/></@compress>){		${tab} ${tab?uncap_first} = new ${tab}(<@compress><@getTableKey cols/></@compress>);		return ${tab?uncap_first}Mapper.get${tab}ByPrimaryKey(${tab?uncap_first});	}	@Override	public ${tab} get${tab}ByPrimaryKey(${tab} ${tab?uncap_first}){		return ${tab?uncap_first}Mapper.get${tab}ByPrimaryKey(${tab?uncap_first});	}		@Override	public List<${tab}> getAll${tab}BySearch(${tab} ${tab?uncap_first}) {		return ${tab?uncap_first}Mapper.getAll${tab}BySearch(${tab?uncap_first});	}		@Override	public ${tab} getOne${tab}BySearch(${tab} ${tab?uncap_first}){		List<${tab}> list = ${tab?uncap_first}Mapper.getAll${tab}ByPage(0, 1, ${tab?uncap_first});		return null==list || list.size()==0 ? new ${tab}() : list.get(0);	}		@Override	public int getCount${tab}BySearch(${tab} ${tab?uncap_first}){		return ${tab?uncap_first}Mapper.getCountForPage(${tab?uncap_first});	}		@Override	public List<${tab}> getAll${tab}BySearchKey(${tab} ${tab?uncap_first}, List<String> colList) {		List<${tab}> searchKeyList = genSearchKeyParamValueList(${tab?uncap_first},colList);		return ${tab?uncap_first}Mapper.getAll${tab}BySearchKey(searchKeyList);	}		@Override	public Pagination getAll${tab}ByPage(Pagination page, ${tab} ${tab?uncap_first}) {		List<${tab}> list = ${tab?uncap_first}Mapper.getAll${tab}ByPage(page.getStartRow(), page.getPageSize(), ${tab?uncap_first});		int count = ${tab?uncap_first}Mapper.getCountForPage(${tab?uncap_first});		page.setData(list);		page.setTotalCount(count);		page.setTotalPage(page.getTotalPage());		return page;	}	@Override	public Pagination getAll${tab}ByPageAndSearchKey(Pagination page,			${tab} ${tab?uncap_first}, List<String> colList) {		List<${tab}> searchKeyList = genSearchKeyParamValueList(${tab?uncap_first},colList);		List<${tab}> list = ${tab?uncap_first}Mapper.getAll${tab}WithSearchKeyByPage(page.getStartRow(), page.getPageSize(), searchKeyList);		int count = ${tab?uncap_first}Mapper.getCountWithSearchKeyForPage(searchKeyList);		page.setData(list);		page.setTotalCount(count);		page.setTotalPage(page.getTotalPage());		return page;	}	<#if (joinTables?size>0)>	@Override	public ${tab}Extend get${tab}ByPrimaryKeyWithJoin(${tab}Extend ${tab?uncap_first}Extend){		return ${tab?uncap_first}ExtendViewMapper.get${tab}ByPrimaryKeyWithJoin(${tab?uncap_first}Extend);	}		@Override	public List<${tab}Extend> getAll${tab}BySearchWithJoin(${tab}Extend ${tab?uncap_first}Extend){		return ${tab?uncap_first}ExtendViewMapper.getAll${tab}BySearchWithJoin(${tab?uncap_first}Extend);	}		@Override	public List<${tab}Extend> getAll${tab}BySearchKeyWithJoin(${tab}Extend ${tab?uncap_first}Extend,			List<String> colList) {		List<${tab}Extend> searchKeyList = genSearchKeyParamValueList(${tab?uncap_first}Extend,colList);		return ${tab?uncap_first}ExtendViewMapper.getAll${tab}BySearchKeyWithJoin(searchKeyList);	}		@Override	public ${tab}Extend getOne${tab}BySearchWithJoin(${tab}Extend ${tab?uncap_first}Extend){		List<${tab}Extend> list = ${tab?uncap_first}ExtendViewMapper.getAll${tab}ByPageWithJoin(0, 1, ${tab?uncap_first}Extend);		if(null==list || list.size()==0)			return new ${tab}Extend();		return list.get(0);	}		@Override	public Pagination getAll${tab}ByPageWithJoin(Pagination page, ${tab}Extend ${tab?uncap_first}Extend){		List<${tab}Extend> list = ${tab?uncap_first}ExtendViewMapper.getAll${tab}ByPageWithJoin(page.getStartRow(), page.getPageSize(), ${tab?uncap_first}Extend);		int count = ${tab?uncap_first}ExtendViewMapper.getCountForPageWithJoin(${tab?uncap_first}Extend);		page.setData(list);		page.setTotalCount(count);		page.setTotalPage(page.getTotalPage());		return page;	}		@Override	public Pagination getAll${tab}ByPageAndSearchKeyWithJoin(Pagination page,			${tab}Extend ${tab?uncap_first}Extend, List<String> colList) {		List<${tab}Extend> searchKeyList = genSearchKeyParamValueList(${tab?uncap_first}Extend,colList);		List<${tab}Extend> list = ${tab?uncap_first}ExtendViewMapper.getAll${tab}ByPageAndSearchKeyWithJoin(page.getStartRow(), page.getPageSize(), searchKeyList);		int count = ${tab?uncap_first}ExtendViewMapper.getCountForPageAndSearchKeyWithJoin(searchKeyList);		page.setData(list);		page.setTotalCount(count);		page.setTotalPage(page.getTotalPage());		return page;	}</#if>	<#if (refCols?size>0)><#list refCols as col><#if (col.typeExpend?upper_case=="LIST")><#if (col.fatherTableHasJoin)>	@Override	public ${tab} add<@genAttributeByForSetAndGet colName_ABFSAG='${col.code}'/>(${tab} ${tab?uncap_first},${col.type}Extend ${col.type?uncap_first}ExtendFilter){		if(null!=${tab?uncap_first}){			${tab?uncap_first}.addRefData(${tab}Ref.EV_${col.type?upper_case}.enumVal,${col.type?uncap_first}ExtendViewMapper.getAll${col.type}BySearchWithJoin(${col.type?uncap_first}ExtendFilter));		}		return ${tab?uncap_first};	}	@Override	public ${tab} add<@genAttributeByForSetAndGet colName_ABFSAG='${col.code}'/>(${tab} ${tab?uncap_first},${col.type}Extend ${col.type?uncap_first}ExtendFilter,Pagination page){		if(null!=${tab?uncap_first}){			${tab?uncap_first}.addRefData(${tab}Ref.EV_${col.type?upper_case}.enumVal,${col.type?uncap_first}ExtendViewMapper.getAll${col.type}ByPageWithJoin(page.getStartRow(), page.getPageSize(),${col.type?uncap_first}ExtendFilter));		}		return ${tab?uncap_first};	}<#else>	@Override	public ${tab} add<@genAttributeByForSetAndGet colName_ABFSAG='${col.code}'/>(${tab} ${tab?uncap_first},${col.type} ${col.type?uncap_first}Filter){		if(null!=${tab?uncap_first}){			${tab?uncap_first}.addRefData(${tab}Ref.EV_${col.type?upper_case}.enumVal, ${col.type?uncap_first}Mapper.getAll${col.type}BySearch(${col.type?uncap_first}Filter));		}		return ${tab?uncap_first};	}	@Override	public ${tab} add<@genAttributeByForSetAndGet colName_ABFSAG='${col.code}'/>(${tab} ${tab?uncap_first},${col.type} ${col.type?uncap_first}Filter,Pagination page){		if(null!=${tab?uncap_first}){			${tab?uncap_first}.addRefData(${tab}Ref.EV_${col.type?upper_case}.enumVal, ${col.type?uncap_first}Mapper.getAll${col.type}ByPage(page.getStartRow(), page.getPageSize(),${col.type?uncap_first}Filter));		}		return ${tab?uncap_first};	}	</#if><#else>	@Override	public ${tab} add<@genAttributeByForSetAndGet colName_ABFSAG='${col.code}'/>(${tab} ${tab?uncap_first}){		if(null!=${tab?uncap_first}){	<#if (col.refChildColumnPrimaryKey)>		<#if (col.fatherTableHasJoin)>			${tab?uncap_first}.addRefData(${tab}Ref.EV_${col.type?upper_case}.enumVal,${col.type?uncap_first}ExtendViewMapper.get${col.type}ByPrimaryKeyWithJoin(new ${col.type}Extend(new ${col.type}((${tab?uncap_first}.get<@genAttributeByForSetAndGet colName_ABFSAG='${col.refFatherColumn}'/>())))));		<#else>			${tab?uncap_first}.addRefData(${tab}Ref.EV_${col.type?upper_case}.enumVal,${col.type?uncap_first}Mapper.get${col.type}ByPrimaryKey(new ${tab}(${tab?uncap_first}.get<@genAttributeByForSetAndGet colName_ABFSAG='${col.refFatherColumn}'/>()));		</#if>	<#else>			${col.type} ${col.type}Filter = new ${col.type}();			${col.type}Filter.set<@genAttributeByForSetAndGet colName_ABFSAG='${col.refChildColumn}'/>(${tab?uncap_first}.get<@genAttributeByForSetAndGet colName_ABFSAG='${col.refFatherColumn}'/>());		<#if (col.fatherTableHasJoin)>			List<${col.type}> ${col.type?uncap_first}List = ${col.type?uncap_first}ExtendViewMapper.getAll${col.type}BySearchWithJoin(${col.type}Filter);		<#else>			List<${col.type}> ${col.type?uncap_first}List = ${col.type?uncap_first}Mapper.getAll${col.type}BySearch(${col.type}Filter);		</#if>			if(null!=${col.type?uncap_first}List && ${col.type?uncap_first}List.size()>0)				${tab?uncap_first}.addRefData(${tab}Ref.EV_${col.type?upper_case}.enumVal,${col.type?uncap_first}List.get(0));	</#if>		}		return ${tab?uncap_first};	}	</#if></#list></#if>	List<${tab}> genSearchKeyParamValueList(${tab} ${tab?uncap_first}, List<String> colList){		List<${tab}> searchKeyList = new ArrayList<${tab}>();		for(String searchCol:colList){			${tab} ${tab?uncap_first}Tmp = new ${tab}(${tab?uncap_first});			<#assign colHasAddCol>${columnHasAddStrCol(cols)?string}</#assign>			<#if colHasAddCol=='true'>			try {				if(<@genColCompareStrs cols true />){					BeanUtils.setProperty(${tab?uncap_first}Tmp, searchCol + "Str", ${tab?uncap_first}.getSearchKey());				}else{					BeanUtils.setProperty(${tab?uncap_first}Tmp, searchCol, ${tab?uncap_first}.getSearchKey());				}			} catch (IllegalAccessException | InvocationTargetException e1) {				e1.printStackTrace();			}			<#else>			try {				BeanUtils.setProperty(${tab?uncap_first}Tmp, searchCol, ${tab?uncap_first}.getSearchKey());			} catch (IllegalAccessException | InvocationTargetException e1) {				e1.printStackTrace();			}			</#if>			searchKeyList.add(${tab?uncap_first}Tmp);		}		return searchKeyList;	}	<#if (joinTables?size>0)>	List<${tab}Extend> genSearchKeyParamValueList(${tab}Extend ${tab?uncap_first}Extend, List<String> colList){		List<${tab}Extend> searchKeyList = new ArrayList<${tab}Extend>();		for(String searchCol:colList){			${tab}Extend ${tab?uncap_first}Tmp = new ${tab}Extend(${tab?uncap_first}Extend);			try {				if(<@genColCompareStrs cols false />){					BeanUtils.setProperty(${tab?uncap_first}Tmp, searchCol + "Str", ${tab?uncap_first}Extend.getSearchKey());				}else{					BeanUtils.setProperty(${tab?uncap_first}Tmp, searchCol, ${tab?uncap_first}Extend.getSearchKey());				}			} catch (IllegalAccessException | InvocationTargetException e1) {				e1.printStackTrace();			}			searchKeyList.add(${tab?uncap_first}Tmp);		}		return searchKeyList;	}</#if>}