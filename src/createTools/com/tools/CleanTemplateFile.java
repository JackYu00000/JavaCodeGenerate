package com.tools;import java.io.File;import java.util.List;import com.tools.entity.DBTable;import com.tools.entity.ftl.FtlTableEnum;public class CleanTemplateFile extends TemplateFile{		public int tabelEntity(String path ,List<DBTable> tables) throws Exception {		for(DBTable table:tables){			new File(realPathBuild(table.getTab(), "", path.concat("/entity"))+JAVA_END).deleteOnExit();			new File(realPathBuild(table.getTab(), "", path.concat("/extend")) + "Extend"+JAVA_END).deleteOnExit();			new File(realPathBuild(table.getTab(), "", path.concat("/vojo")) + "Vojo"+JAVA_END).deleteOnExit();			new File(realPathBuild(table.getTab(), "", path.concat("enum"))+JAVA_END).deleteOnExit();			new File(realPathBuild(table.getTab(), "", path.concat("/refenum")) + "Ref"+JAVA_END).deleteOnExit();			new File(realPathBuild(table.getTab(), "", path.concat("/comparecolsenum")) + "CompareCols"+JAVA_END).deleteOnExit();			new File(realPathBuild(table.getTab(), "", path.concat("/updateinsqlenum")) + "UpdateInSqlCols"+JAVA_END).deleteOnExit();		}		return 1;	}		public int tabelEnum(File path ,List<FtlTableEnum> tableEnums) throws Exception {		for(FtlTableEnum dte:tableEnums){			String f = realPathBuild(dte.getKey(), "", path.getPath());						File out = new File(f+JAVA_END);			out.deleteOnExit();		}		return 1;	}		public int xmlMapper(File path ,List<DBTable> tables) throws Exception {		for(DBTable table:tables){			new File(realPathBuild(table.getTab(),"", path.getPath())+MAPPER_XML_END).deleteOnExit();			new File(realPathBuild(table.getTab(),"", path.getPath())+ "ExtendView" +MAPPER_XML_END).deleteOnExit();			new File(realPathBuild(table.getTab(),"", path.getPath())+MAPPER_INTER_END).deleteOnExit();			new File(realPathBuild(table.getTab(),"", path.getPath())+ "ExtendView" + MAPPER_INTER_END).deleteOnExit();					}		path.delete();		path.getParentFile().delete();				return 1;			}		public int interMapperTest(File path ,List<DBTable> tables) throws Exception {		for(DBTable table:tables){			String f = realPathBuild(table.getTab(),"", path.getPath());						File out = new File(f + MAPPER_INTER_TEST_END);			out.delete();		}		return 1;	}			public int svcMapper(String path ,List<DBTable> tables) throws Exception {		for(DBTable table:tables){			new File(realPathBuild(table.getTab(), "", path.concat("")) + "Service"+JAVA_END).deleteOnExit();			new File(realPathBuild(table.getTab(), "", path.concat("/impl")) + "ServiceImpl"+JAVA_END).deleteOnExit();		}		return 1;	}			public int controllerMapper(String path ,List<DBTable> tables) throws Exception {		for(DBTable table:tables){			new File(realPathBuild(table.getTab(), "", path.concat("/view")) + "ViewController"+JAVA_END).deleteOnExit();			new File(realPathBuild(table.getTab(), "", path.concat("/manager")) + "ManagerController"+JAVA_END).deleteOnExit();			new File(realPathBuild(table.getTab(), "", path.concat("/interfacewithjson")) + "InterfaceJsonController"+JAVA_END).deleteOnExit();			new File(realPathBuild(table.getTab(), "", path.concat("/interfacewithmobi")) + "InterfaceMobiController"+JAVA_END).deleteOnExit();			new File(realPathBuild(table.getTab(), "", path.concat("/interfacewithrest")) + "InterfaceRestController"+JAVA_END).deleteOnExit();		}		return 1;	}				public int jsp(File path ,List<DBTable> tables) throws Exception {		String left = realPathBuild("",  "", path.getPath());					File leftMenu = new File(left + "/leftmenu.jsp");		leftMenu.deleteOnExit();		for(DBTable table:tables){			String f = realPathBuild(table.getTab(),  table.getAction(), path.getPath());						File out = new File(f);			File outModify = new File(f.toLowerCase() + "/" + table.getCode().toLowerCase().replaceFirst("^t_", "").replace("_", "") + "_modify" + JSP_END);			File outShow = new File(f.toLowerCase() + "/" + table.getCode().toLowerCase().replaceFirst("^t_", "").replace("_", "")+ "_show" + JSP_END);			File outAdd = new File(f.toLowerCase() + "/" + table.getCode().toLowerCase().replaceFirst("^t_", "").replace("_", "")+ "_add" + JSP_END);			File outPageJs = new File(f.toLowerCase() + "/" + table.getCode().toLowerCase().replaceFirst("^t_", "").replace("_", "")+ "_list_page_js" + JSP_END);			File outSearch= new File(f.toLowerCase() + "/" + table.getCode().toLowerCase().replaceFirst("^t_", "").replace("_", "")+ "_list_search" + JSP_END);			File outList = new File(f.toLowerCase() + "/" + table.getCode().toLowerCase().replaceFirst("^t_", "").replace("_", "")+ "_list" + JSP_END);			File outListHeader = new File(f.toLowerCase() + "/" + table.getCode().toLowerCase().replaceFirst("^t_", "").replace("_", "")+ "_list_header" + JSP_END);			outModify.deleteOnExit();			outShow.deleteOnExit();			outAdd.deleteOnExit();			outList.deleteOnExit();			outPageJs.deleteOnExit();			outSearch.deleteOnExit();			outListHeader.deleteOnExit();			out.delete();		}		return 1;	}	}